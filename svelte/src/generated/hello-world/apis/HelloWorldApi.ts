// tslint:disable
/**
 * Hello World API
 * A \"Hello World!\" API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    ErrorMessage,
    HelloWorldByIdQueryResponseMessage,
    HelloWorldDeletedEventMessage,
    HelloWorldSaidEventMessage,
    HelloWorldSearchQueryResponseMessage,
    HelloWorldUpdatedEventMessage,
    SayHelloCommandMessage,
    UpdateHelloCommandMessage,
} from '../models';

export interface CreateHelloWorldRequest {
    sayHelloCommandMessage: SayHelloCommandMessage;
}

export interface DeleteHelloWorldRequest {
    helloWorldId: string;
}

export interface GetHelloWorldRequest {
    helloWorldId: string;
}

export interface SearchHelloWorldsRequest {
    page?: number;
    pageSize?: number;
}

export interface UpdateHelloWorldRequest {
    updateHelloCommandMessage: UpdateHelloCommandMessage;
}

/**
 * no description
 */
export class HelloWorldApi extends BaseAPI {

    /**
     * Creates a hello world message.
     */
    createHelloWorld({ sayHelloCommandMessage }: CreateHelloWorldRequest): Observable<HelloWorldSaidEventMessage>
    createHelloWorld({ sayHelloCommandMessage }: CreateHelloWorldRequest, opts?: OperationOpts): Observable<RawAjaxResponse<HelloWorldSaidEventMessage>>
    createHelloWorld({ sayHelloCommandMessage }: CreateHelloWorldRequest, opts?: OperationOpts): Observable<HelloWorldSaidEventMessage | RawAjaxResponse<HelloWorldSaidEventMessage>> {
        throwIfNullOrUndefined(sayHelloCommandMessage, 'sayHelloCommandMessage', 'createHelloWorld');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<HelloWorldSaidEventMessage>({
            url: '/hello-world',
            method: 'POST',
            headers,
            body: sayHelloCommandMessage,
        }, opts?.responseOpts);
    };

    /**
     * Deletes a hello world message.
     */
    deleteHelloWorld({ helloWorldId }: DeleteHelloWorldRequest): Observable<HelloWorldDeletedEventMessage>
    deleteHelloWorld({ helloWorldId }: DeleteHelloWorldRequest, opts?: OperationOpts): Observable<RawAjaxResponse<HelloWorldDeletedEventMessage>>
    deleteHelloWorld({ helloWorldId }: DeleteHelloWorldRequest, opts?: OperationOpts): Observable<HelloWorldDeletedEventMessage | RawAjaxResponse<HelloWorldDeletedEventMessage>> {
        throwIfNullOrUndefined(helloWorldId, 'helloWorldId', 'deleteHelloWorld');

        const headers: HttpHeaders = {
        };

        return this.request<HelloWorldDeletedEventMessage>({
            url: '/hello-world/{helloWorldId}'.replace('{helloWorldId}', encodeURI(helloWorldId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Gets a hello world message.
     */
    getHelloWorld({ helloWorldId }: GetHelloWorldRequest): Observable<HelloWorldByIdQueryResponseMessage>
    getHelloWorld({ helloWorldId }: GetHelloWorldRequest, opts?: OperationOpts): Observable<RawAjaxResponse<HelloWorldByIdQueryResponseMessage>>
    getHelloWorld({ helloWorldId }: GetHelloWorldRequest, opts?: OperationOpts): Observable<HelloWorldByIdQueryResponseMessage | RawAjaxResponse<HelloWorldByIdQueryResponseMessage>> {
        throwIfNullOrUndefined(helloWorldId, 'helloWorldId', 'getHelloWorld');

        const headers: HttpHeaders = {
        };

        return this.request<HelloWorldByIdQueryResponseMessage>({
            url: '/hello-world/{helloWorldId}'.replace('{helloWorldId}', encodeURI(helloWorldId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Searchs for hello world messages.
     */
    searchHelloWorlds({ page, pageSize }: SearchHelloWorldsRequest): Observable<HelloWorldSearchQueryResponseMessage>
    searchHelloWorlds({ page, pageSize }: SearchHelloWorldsRequest, opts?: OperationOpts): Observable<RawAjaxResponse<HelloWorldSearchQueryResponseMessage>>
    searchHelloWorlds({ page, pageSize }: SearchHelloWorldsRequest, opts?: OperationOpts): Observable<HelloWorldSearchQueryResponseMessage | RawAjaxResponse<HelloWorldSearchQueryResponseMessage>> {

        const headers: HttpHeaders = {
        };

        const query: HttpQuery = {};

        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['pageSize'] = pageSize; }

        return this.request<HelloWorldSearchQueryResponseMessage>({
            url: '/hello-world',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Updates an existing hello world message.
     */
    updateHelloWorld({ updateHelloCommandMessage }: UpdateHelloWorldRequest): Observable<HelloWorldUpdatedEventMessage>
    updateHelloWorld({ updateHelloCommandMessage }: UpdateHelloWorldRequest, opts?: OperationOpts): Observable<RawAjaxResponse<HelloWorldUpdatedEventMessage>>
    updateHelloWorld({ updateHelloCommandMessage }: UpdateHelloWorldRequest, opts?: OperationOpts): Observable<HelloWorldUpdatedEventMessage | RawAjaxResponse<HelloWorldUpdatedEventMessage>> {
        throwIfNullOrUndefined(updateHelloCommandMessage, 'updateHelloCommandMessage', 'updateHelloWorld');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<HelloWorldUpdatedEventMessage>({
            url: '/hello-world',
            method: 'PUT',
            headers,
            body: updateHelloCommandMessage,
        }, opts?.responseOpts);
    };

}
