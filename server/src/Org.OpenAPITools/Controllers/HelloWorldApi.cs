/*
 * Hello World API
 *
 * A \"Hello World!\" API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class HelloWorldApiController : ControllerBase
    {
        static private List<HelloWorld> messages = new List<HelloWorld>();

        /// <summary>
        /// Creates a hello world message.
        /// </summary>
        /// <param name="sayHelloCommandMessage"></param>
        /// <response code="200">The hello world message was created.</response>
        /// <response code="400">The input is malformed.</response>
        /// <response code="401">The user is not authenticated with the system.</response>
        /// <response code="403">The user is not authorized to perform this operation.</response>
        [HttpPost]
        [Route("/hello-world")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateHelloWorld")]
        [SwaggerResponse(statusCode: 200, type: typeof(HelloWorldSaidEventMessage), description: "The hello world message was created.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorMessage), description: "The input is malformed.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorMessage), description: "The user is not authenticated with the system.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorMessage), description: "The user is not authorized to perform this operation.")]
        public virtual IActionResult CreateHelloWorld([FromBody] SayHelloCommandMessage sayHelloCommandMessage)
        {
            var message = new HelloWorld
            {
                Id = Guid.NewGuid(),
                Name = sayHelloCommandMessage.Name
            };
            messages.Add(message);

            return new ObjectResult(new HelloWorldSaidEventMessage
            {
                Message = message
            });
        }

        /// <summary>
        /// Deletes a hello world message.
        /// </summary>
        /// <param name="helloWorldId">The ID of the hello world message.</param>
        /// <response code="200">The message was deleted.</response>
        /// <response code="401">The user is not authenticated.</response>
        /// <response code="403">The user is not authorized to view this information.</response>
        /// <response code="404">The hello world message was not found.</response>
        [HttpDelete]
        [Route("/hello-world/{helloWorldId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteHelloWorld")]
        [SwaggerResponse(statusCode: 200, type: typeof(HelloWorldDeletedEventMessage), description: "The message was deleted.")]
        public virtual IActionResult DeleteHelloWorld([FromRoute(Name = "helloWorldId")][Required] Guid helloWorldId)
        {
            var index = messages.FindIndex(m => m.Id == helloWorldId);
            if (index == -1)
            {
                return new NotFoundResult();
            }
            messages.RemoveAt(index);
            return new OkResult();
        }

        /// <summary>
        /// Gets a hello world message.
        /// </summary>
        /// <param name="helloWorldId">The ID of the hello world message.</param>
        /// <response code="200">A hello world message.</response>
        /// <response code="401">The user is not authenticated.</response>
        /// <response code="403">The user is not authorized to view this information.</response>
        /// <response code="404">The hello world message was not found.</response>
        [HttpGet]
        [Route("/hello-world/{helloWorldId}")]
        [ValidateModelState]
        [SwaggerOperation("GetHelloWorld")]
        [SwaggerResponse(statusCode: 200, type: typeof(HelloWorldByIdQueryResponseMessage), description: "A hello world message.")]
        public virtual IActionResult GetHelloWorld([FromRoute(Name = "helloWorldId")][Required] Guid helloWorldId)
        {
            var message = messages.Find(m => m.Id == helloWorldId);
            if (message == null)
            {
                return new NotFoundResult();
            }
            return new ObjectResult(message);
        }

        /// <summary>
        /// Searchs for hello world messages.
        /// </summary>
        /// <param name="page">The page to retrieve.</param>
        /// <param name="pageSize">The number of results included per page.</param>
        /// <response code="200">A search response.</response>
        /// <response code="400">The input is malformed.</response>
        /// <response code="401">The user is not authenticated with the system.</response>
        /// <response code="403">The user is not authorized to perform this operation.</response>
        [HttpGet]
        [Route("/hello-world")]
        [ValidateModelState]
        [SwaggerOperation("SearchHelloWorlds")]
        [SwaggerResponse(statusCode: 200, type: typeof(HelloWorldSearchQueryResponseMessage), description: "A search response.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorMessage), description: "The input is malformed.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorMessage), description: "The user is not authenticated with the system.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorMessage), description: "The user is not authorized to perform this operation.")]
        public virtual IActionResult SearchHelloWorlds([FromQuery(Name = "page")] int? page, [FromQuery(Name = "pageSize")][Range(1, 100)] int? pageSize)
        {
            int queryPage = page != null && page.HasValue ? page.Value : 0;
            int queryPageSize = pageSize != null && pageSize.HasValue ? pageSize.Value : 10;
            var result = new HelloWorldSearchQueryResponseMessage
            {
                Pagination = new HelloWorldSearchQueryResponseMessagePagination
                {
                    Page = queryPage,
                    PageSize = queryPageSize,
                    TotalResults = messages.Count
                },
                Results = messages.Skip(queryPage).Take(queryPageSize).ToList()
            };
            return new ObjectResult(result);
        }

        /// <summary>
        /// Updates an existing hello world message.
        /// </summary>
        /// <param name="updateHelloCommandMessage"></param>
        /// <response code="200">The hello world message was updated.</response>
        /// <response code="400">The input is malformed.</response>
        /// <response code="401">The user is not authenticated with the system.</response>
        /// <response code="403">The user is not authorized to perform this operation.</response>
        /// <response code="404">The specified resource was not found.</response>
        [HttpPut]
        [Route("/hello-world")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateHelloWorld")]
        [SwaggerResponse(statusCode: 200, type: typeof(HelloWorldUpdatedEventMessage), description: "The hello world message was updated.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorMessage), description: "The input is malformed.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorMessage), description: "The user is not authenticated with the system.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorMessage), description: "The user is not authorized to perform this operation.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorMessage), description: "The specified resource was not found.")]
        public virtual IActionResult UpdateHelloWorld([FromBody] UpdateHelloCommandMessage updateHelloCommandMessage)
        {
            var message = messages.Find(m => m.Id == updateHelloCommandMessage.Id);
            if (message == null)
            {
                return new NotFoundResult();
            }
            message.Name = updateHelloCommandMessage.Name;
            return new OkResult();
        }
    }
}
